shiny::runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/Sample')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
raw.df <- readr::read_csv("./data.csv")
wd
getwd()
setwd(C:/Users/david/OneDrive/Documents)
setwd(C:Users/david/OneDrive/Documents)
setwd(C:david/OneDrive/Documents)
setwd("~/")
setwd('C:/Users/david/OneDrive/Documents')
raw.df <- readr::read_csv("./data.csv")
get(wd)
getwd()
knitr::opts_chunk$set(echo = TRUE)
raw.df <- readr::read_csv("./data.csv")
raw.df <- readr::read_csv("./data.csv")
setwd("~/")
raw.df <- readr::read_csv("./data.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
raw.df <- readr::read_csv("./data.csv")
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(raw.df) <- tolower(names(raw.df))
raw.df <- rename(raw.df, cuisine = `cuisine description`)
raw.df <- rename(raw.df, inspection.date = `inspection date`)
# 2. Convert the inspection.date column from character to date format.
raw.df <- raw.df %>% mutate(inspection.date = as.Date(inspection.date, "%m/%d/%Y"))
# 3. Extract the month from the inspection.date column.
raw.df <- raw.df %>% mutate(month=as.numeric(format(inspection.date, "%m")))
# 4. Impute the missing values for the 'grade' column
raw.df <- raw.df %>% mutate(grade = ifelse(0 < score & score < 14 , 'A',
ifelse(score < 28, 'B', 'C')))
# 5. Rename the description from the action column to something short so it won't blow up your graph.
raw.df <- mutate(raw.df, action = gsub(pattern = "Violations were cited in the following area(s).", replacement = "violations", x = action, ignore.case = F, fixed = T)) %>%
mutate(action = gsub(pattern = "No violations were recorded at the time of this inspection.", replacement = "no violations", x = action, ignore.case = F)) %>%
mutate(action = gsub(pattern = "Establishment re-opened by DOHMH", replacement = "reopened", x = action, ignore.case = F)) %>%
mutate(action = gsub(pattern = "Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those requiring immediate action were addressed.", replacement = "closed", x = action, ignore.case = F, fixed = T)) %>%
mutate(action = gsub(pattern = "Establishment re-closed by DOHMH", replacement = "reclosed", x = action, ignore.case = F))
# 6. We want to filter out missing values to make our lives easier for further analysis.
raw.df <- filter(raw.df,
boro != 'Missing' & #Eliminate remaining rows with boro == 'Missing'; confirmed that none are in NYC
inspection.date > '1900-01-01' & #Eliminate rows where the restaurant hasn't been inspected yet
!is.na(score) & #Eliminate rows without a score
score >= 0 #Eliminate rows with a negative score
)
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
raw.df <- select(raw.df, camis, boro, cuisine, inspection.date, action, score, grade, month)
# 8. Unique inspections
inspections = unique(raw.df)
#Bar plot: Restaurants by borough and grade
ggplot(data=inspections) +
geom_bar(aes(x=boro,fill=grade), position='dodge') +
labs(title='Restaurants by borough and latest grade',
x='Borough',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
#Bar plot: Restaurants by borough and grade
ggplot(data=inspections) +
geom_bar(aes(x=boro,fill=grade), position='dodge') +
labs(title='Restaurants by borough and latest grade',
x='Borough',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
theme_bw() #+
#theme(legend.key=element_blank())
#Bar plot: Restaurants by borough and grade
ggplot(data=inspections) +
geom_bar(aes(x=boro,fill=grade), position='dodge') +
labs(title='Restaurants by borough and latest grade',
x='Borough',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
#Bar plot: Restaurants by borough and grade
ggplot(data=inspections) +
geom_bar(aes(x=boro,fill=grade), position='dodge') +
labs(title='Restaurants by borough and latest grade',
x='Borough',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
theme_bw() #+
#theme(legend.key=element_blank())
ggplot(data=inspections) +
geom_bar(aes(x=boro,fill=grade), position='dodge') +
labs(title='Restaurants by borough and latest grade',
x='Borough',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
cuisine_flitered <- inspections %>%
group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20, count)
cuisine_flitered
inspectionsFiltered = semi_join(inspections, cuisine_flitered, by = 'cuisine')
inspectionsFiltered
cuisine_flitered <- inspections %>%
group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20, count)
inspectionsFiltered = semi_join(inspections, cuisine_flitered, by = 'cuisine')
inspectionsFiltered
#Bar plot: Restaurants by cuisine and grade
cuisine_flitered <- inspections %>%
group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20, count)
inspectionsFiltered = semi_join(inspections, cuisine_flitered, by = 'cuisine')
ggplot(data=inspectionsFiltered) +
geom_bar(aes(x=reorder(cuisine, cuisine, function(x) length(x)), fill=grade), position='dodge') +
labs(title='Restaurants by cuisine and grade',
x='Cuisine',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
coord_flip() +
theme_bw() +
theme(legend.key=element_blank())
#Density plot: Restaurants by score and borough
ggplot(data=inspections, aes (x=score)) +
stat_density(aes(color=boro), geom="line",position="identity") +
coord_cartesian(xlim=c(0,40)) +
labs(title='Density of restaurants by latest score and borough',
x='Score',
y='Restaurant density') +
scale_y_continuous(breaks=seq(0,0.14,0.02),
labels = scales::percent) +
scale_colour_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank()) +
geom_vline(xintercept = c(14,28), colour='grey') +
annotate("text", x = c(6,20,35), y = 0.11, label = c('A','B','C'), size=6) +
annotate("rect", xmin = 0, xmax = 14, ymin = 0, ymax = 0.13, alpha = .2, fill='darkred') +
annotate("rect", xmin = 14, xmax = 28, ymin = 0, ymax = 0.13, alpha = .2, fill='darkblue') +
annotate("rect", xmin = 28, xmax = 60, ymin = 0, ymax = 0.13, alpha = .2, fill='darkgreen')
shiny::runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
shiny::runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp()
runApp()
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp()
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp()
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp()
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp()
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
runApp()
runApp('C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project')
setwd("C:/Users/david/OneDrive/Desktop/DataScienceHW/R Work/R Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shinydashboard)
library(RColorBrewer)
library(tigris)
library(dplyr)
library(ggplot2)
library(leaflet)
library(plotly)
library(leaflet.providers)
char_zips <- zctas(cb = TRUE, starts_with = c('100', '101', '102', '103', '104','110', '111', '112', '113', '114', '116'))
library(tidyverse)
library(shinydashboard)
library(RColorBrewer)
library(tigris)
library(dplyr)
library(ggplot2)
library(leaflet)
library(plotly)
library(leaflet.providers)
char_zips <- zctas(cb = TRUE, starts_with = c('100', '101', '102', '103', '104','110', '111', '112', '113', '114', '116'))
char_zips
library(tidyverse)
library(shinydashboard)
library(RColorBrewer)
library(tigris)
library(dplyr)
library(ggplot2)
library(leaflet)
library(plotly)
library(leaflet.providers)
char_zips <- zctas(cb = TRUE, starts_with = c('100', '101', '102', '103', '104','110', '111', '112', '113', '114', '116'))
char_zips %>% rename(., 'Zipcode' = 'ZCTA5CE10')
runApp()
runApp()
runApp()
range(char_zips$Percent.Population, na.rm = TRUE)
library(tidyverse)
library(shinydashboard)
library(RColorBrewer)
library(tigris)
library(dplyr)
library(ggplot2)
library(leaflet)
library(plotly)
library(leaflet.providers)
char_zips <- zctas(cb = TRUE, starts_with = c('100', '101', '102', '103', '104','110', '111', '112', '113', '114', '116'))
char_zips
library(tidyverse)
library(shinydashboard)
library(RColorBrewer)
library(tigris)
library(dplyr)
library(ggplot2)
library(leaflet)
library(plotly)
library(leaflet.providers)
char_zips <- zctas(cb = TRUE, starts_with = c('100', '101', '102', '103', '104','110', '111', '112', '113', '114', '116'))
colnames(char_zips@data)[1]= 'Zipcode'
library(tidyverse)
library(shinydashboard)
library(RColorBrewer)
library(tigris)
library(dplyr)
library(ggplot2)
library(leaflet)
library(plotly)
library(leaflet.providers)
char_zips <- zctas(cb = TRUE, starts_with = c('100', '101', '102', '103', '104','110', '111', '112', '113', '114', '116'))
colnames(char_zips@data)[1]= 'Zipcode'
char_zips
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tidyverse)
library(dplyr)
tests <- read.csv('tests.csv')
census <- read.csv('Census.csv')
popdens <- read.csv('uszips.csv')
tests <- tests %>%
rename(., c('Zipcode' = 'MODZCTA', 'Percent.Population' = 'zcta_cum.perc_pos'))
censusdata <- census %>%
mutate(., Percent_College = (Bachelors + Masters + Professional +Doctorate)/TotalEd * 100) %>%
select(., 'Area.Name', 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.', 'Percent_College') %>%
rename(., c('Zipcode' = 'Area.Name','Median.Household.Income'= 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.'))
censusdata$Zipcode = substr(censusdata$Zipcode, 6, 999)
censusdata$Zipcode = as.numeric(censusdata$Zipcode)
popdens <- popdens %>%
select(., 'zip', 'density') %>%
#filter(., city == 'New York' | city == 'Staten Island' | city == 'Bronx') %>%
rename(., 'Zipcode' = 'zip')
workingdata = inner_join(inner_join(tests, censusdata, 'Zipcode'), popdens, 'Zipcode')
library(tidyverse)
library(dplyr)
tests <- read.csv('tests.csv')
census <- read.csv('Census.csv')
popdens <- read.csv('uszips.csv')
tests <- tests %>%
rename(., c('Zipcode' = 'MODZCTA', 'Percent.Population' = 'zcta_cum.perc_pos'))
censusdata <- census %>%
mutate(., Percent_College = (Bachelors + Masters + Professional +Doctorate)/TotalEd * 100) %>%
select(., 'Area.Name', 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.', 'Percent_College') %>%
rename(., c('Zipcode' = 'Area.Name','Median.Household.Income'= 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.'))
censusdata$Zipcode = substr(censusdata$Zipcode, 6, 999)
censusdata$Zipcode = as.numeric(censusdata$Zipcode)
popdens <- popdens %>%
select(., 'zip', 'density') %>%
#filter(., city == 'New York' | city == 'Staten Island' | city == 'Bronx') %>%
rename(., 'Zipcode' = 'zip')
workingdata = inner_join(inner_join(tests, censusdata, 'Zipcode'), popdens, 'Zipcode')
workingdata
library(tidyverse)
library(dplyr)
tests <- read.csv('tests.csv')
census <- read.csv('Census.csv')
popdens <- read.csv('uszips.csv')
tests <- tests %>%
rename(., c('Zipcode' = 'MODZCTA', 'Percent.Population' = 'zcta_cum.perc_pos'))
censusdata <- census %>%
mutate(., Percent_College = (Bachelors + Masters + Professional +Doctorate)/TotalEd * 100) %>%
mutate(., Percent_Public_Transit = Publictrans/Totaltrans * 100)
select(., 'Area.Name', 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.', 'Percent_College') %>%
rename(., c('Zipcode' = 'Area.Name','Median.Household.Income'= 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.'))
library(tidyverse)
library(dplyr)
tests <- read.csv('tests.csv')
census <- read.csv('Census.csv')
popdens <- read.csv('uszips.csv')
tests <- tests %>%
rename(., c('Zipcode' = 'MODZCTA', 'Percent.Population' = 'zcta_cum.perc_pos'))
censusdata <- census %>%
mutate(., Percent_College = (Bachelors + Masters + Professional +Doctorate)/TotalEd * 100) %>%
mutate(., Percent_Public_Transit = Publictrans/Totaltrans * 100) %>%
select(., 'Area.Name', 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.', 'Percent_College', Percent_Public_Transit) %>%
rename(., c('Zipcode' = 'Area.Name','Median.Household.Income'= 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.'))
censusdata$Zipcode = substr(censusdata$Zipcode, 6, 999)
censusdata$Zipcode = as.numeric(censusdata$Zipcode)
popdens <- popdens %>%
select(., 'zip', 'density') %>%
#filter(., city == 'New York' | city == 'Staten Island' | city == 'Bronx') %>%
rename(., 'Zipcode' = 'zip')
workingdata = inner_join(inner_join(tests, censusdata, 'Zipcode'), popdens, 'Zipcode')
workingdata
library(tidyverse)
library(dplyr)
tests <- read.csv('tests.csv')
census <- read.csv('Census.csv')
popdens <- read.csv('uszips.csv')
tests <- tests %>%
rename(., c('Zipcode' = 'MODZCTA', 'Percent.Population' = 'zcta_cum.perc_pos'))
censusdata <- census %>%
mutate(., Percent_College = (Bachelors + Masters + Professional +Doctorate)/TotalEd * 100) %>%
mutate(., Percent_Public_Transit = Publictrans/Totaltrans * 100) %>%
select(., 'Area.Name', 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.', 'Percent_College', Percent_Public_Transit) %>%
rename(., c('Zipcode' = 'Area.Name','Median.Household.Income'= 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.'))
censusdata$Zipcode = substr(censusdata$Zipcode, 6, 999)
censusdata$Zipcode = as.numeric(censusdata$Zipcode)
popdens <- popdens %>%
select(., 'zip', 'density') %>%
#filter(., city == 'New York' | city == 'Staten Island' | city == 'Bronx') %>%
rename(., 'Zipcode' = 'zip')
workingdata = inner_join(inner_join(tests, censusdata, 'Zipcode'), popdens, 'Zipcode')
workingdata
library(tidyverse)
library(dplyr)
tests <- read.csv('tests.csv')
census <- read.csv('Census.csv')
popdens <- read.csv('uszips.csv')
tests <- tests %>%
rename(., c('Zipcode' = 'MODZCTA', 'Percent.Population' = 'zcta_cum.perc_pos'))
censusdata <- census %>%
mutate(., Percent_College = (Bachelors + Masters + Professional +Doctorate)/TotalEd * 100) %>%
mutate(., Percent_Public_Transit = Publictrans/Totaltrans * 100) %>%
select(., 'Area.Name', 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.', 'Percent_College', Percent_Public_Transit) %>%
rename(., c('Zipcode' = 'Area.Name','Median.Household.Income'= 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.'))
censusdata$Zipcode = substr(censusdata$Zipcode, 6, 999)
censusdata$Zipcode = as.numeric(censusdata$Zipcode)
popdens <- popdens %>%
select(., 'zip', 'density') %>%
#filter(., city == 'New York' | city == 'Staten Island' | city == 'Bronx') %>%
rename(., 'Zipcode' = 'zip')
workingdata = inner_join(inner_join(tests, censusdata, 'Zipcode'), popdens, 'Zipcode')
write_csv(workingdata, './cleaned_data.csv')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tidyverse)
library(dplyr)
tests <- read.csv('tests.csv')
census <- read.csv('Census.csv')
popdens <- read.csv('uszips.csv')
housing <- read.csv('Housing.csv')
tests <- tests %>%
rename(., c('Zipcode' = 'MODZCTA', 'Percent.Population' = 'zcta_cum.perc_pos'))
censusdata <- census %>%
mutate(., Percent_College = (Bachelors + Masters + Professional +Doctorate)/TotalEd * 100) %>%
mutate(., Percent_Public_Transit = Publictrans/Totaltrans * 100) %>%
select(., 'Area.Name', 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.', 'Percent_College', Percent_Public_Transit) %>%
rename(., c('Zipcode' = 'Area.Name','Median.Household.Income'= 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.'))
censusdata$Zipcode = substr(censusdata$Zipcode, 6, 999)
censusdata$Zipcode = as.numeric(censusdata$Zipcode)
housing <- housing %>%
mutate(., Percent_Crowded = (Family5 + Family6 + Family7 + NoFamily4 + NoFamily5 + NoFamily6 + NoFamily7)/Total * 100) %>%
select(., 'Percent_Crowded')
popdens <- popdens %>%
select(., 'zip', 'density') %>%
#filter(., city == 'New York' | city == 'Staten Island' | city == 'Bronx') %>%
rename(., 'Zipcode' = 'zip')
workingdata = inner_join(inner_join(tests, censusdata, 'Zipcode'), popdens, 'Zipcode')
workingdata
library(tidyverse)
library(dplyr)
tests <- read.csv('tests.csv')
census <- read.csv('Census.csv')
popdens <- read.csv('uszips.csv')
housing <- read.csv('Housing.csv')
tests <- tests %>%
rename(., c('Zipcode' = 'MODZCTA', 'Percent.Population' = 'zcta_cum.perc_pos'))
censusdata <- census %>%
mutate(., Percent_College = (Bachelors + Masters + Professional +Doctorate)/TotalEd * 100) %>%
mutate(., Percent_Public_Transit = Publictrans/Totaltrans * 100) %>%
select(., 'Area.Name', 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.', 'Percent_College', Percent_Public_Transit) %>%
rename(., c('Zipcode' = 'Area.Name','Median.Household.Income'= 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.'))
censusdata$Zipcode = substr(censusdata$Zipcode, 6, 999)
censusdata$Zipcode = as.numeric(censusdata$Zipcode)
housing <- housing %>%
mutate(., Percent_Crowded = (Family5 + Family6 + Family7 + NoFamily4 + NoFamily5 + NoFamily6 + NoFamily7)/Total * 100) %>%
select(., 'Percent_Crowded')
housing$Zipcode = substr(censusdata$Zipcode, 6, 999)
housing$Zipcode = as.numeric(censusdata$Zipcode)
popdens <- popdens %>%
select(., 'zip', 'density') %>%
#filter(., city == 'New York' | city == 'Staten Island' | city == 'Bronx') %>%
rename(., 'Zipcode' = 'zip')
workingdata = inner_join(inner_join(inner_join(tests, censusdata, 'Zipcode'), popdens, 'Zipcode'), housing, 'Zipcode')
workingdata
library(tidyverse)
library(dplyr)
tests <- read.csv('tests.csv')
census <- read.csv('Census.csv')
popdens <- read.csv('uszips.csv')
housing <- read.csv('Housing.csv')
tests <- tests %>%
rename(., c('Zipcode' = 'MODZCTA', 'Percent.Population' = 'zcta_cum.perc_pos'))
censusdata <- census %>%
mutate(., Percent_College = (Bachelors + Masters + Professional +Doctorate)/TotalEd * 100) %>%
mutate(., Percent_Public_Transit = Publictrans/Totaltrans * 100) %>%
select(., 'Area.Name', 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.', 'Percent_College', Percent_Public_Transit) %>%
rename(., c('Zipcode' = 'Area.Name','Median.Household.Income'= 'Median.household.income.in.the.past.12.months..in.2017.inflation.adjusted.dollars.'))
censusdata$Zipcode = substr(censusdata$Zipcode, 6, 999)
censusdata$Zipcode = as.numeric(censusdata$Zipcode)
housing <- housing %>%
mutate(., Percent_Crowded = (Family5 + Family6 + Family7 + NoFamily4 + NoFamily5 + NoFamily6 + NoFamily7)/Total * 100) %>%
select(., 'Percent_Crowded')
housing$Zipcode = substr(censusdata$Zipcode, 6, 999)
housing$Zipcode = as.numeric(censusdata$Zipcode)
popdens <- popdens %>%
select(., 'zip', 'density') %>%
#filter(., city == 'New York' | city == 'Staten Island' | city == 'Bronx') %>%
rename(., 'Zipcode' = 'zip')
workingdata = inner_join(inner_join(inner_join(tests, censusdata, 'Zipcode'), popdens, 'Zipcode'), housing, 'Zipcode')
write_csv(workingdata, './cleaned_data.csv')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
